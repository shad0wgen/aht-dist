import { OnInit, OnChanges, OnDestroy } from '@angular/core';
import { HotTableComponent } from './hot-table.component';
import Handsontable from 'handsontable';
import * as ɵngcc0 from '@angular/core';
export declare class HotColumnComponent implements OnInit, OnChanges, OnDestroy {
    private parentComponent;
    private firstRun;
    allowEmpty: Handsontable.GridSettings['allowEmpty'];
    allowHtml: Handsontable.GridSettings['allowHtml'];
    allowInvalid: Handsontable.GridSettings['allowInvalid'];
    checkedTemplate: Handsontable.GridSettings['checkedTemplate'];
    className: Handsontable.GridSettings['className'];
    columnSorting: Handsontable.GridSettings['columnSorting'];
    colWidths: Handsontable.GridSettings['colWidths'];
    commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];
    copyable: Handsontable.GridSettings['copyable'];
    correctFormat: Handsontable.GridSettings['correctFormat'];
    data: Handsontable.GridSettings['data'];
    dateFormat: Handsontable.GridSettings['dateFormat'];
    defaultDate: Handsontable.GridSettings['defaultDate'];
    editor: Handsontable.GridSettings['editor'];
    filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];
    invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];
    label: Handsontable.GridSettings['label'];
    noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];
    numericFormat: Handsontable.GridSettings['numericFormat'];
    placeholder: Handsontable.GridSettings['placeholder'];
    placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];
    readOnly: Handsontable.GridSettings['readOnly'];
    readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];
    renderer: Handsontable.GridSettings['renderer'];
    selectOptions: Handsontable.GridSettings['selectOptions'];
    skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];
    sortByRelevance: Handsontable.GridSettings['sortByRelevance'];
    source: Handsontable.GridSettings['source'];
    strict: Handsontable.GridSettings['strict'];
    title: Handsontable.GridSettings['title'];
    trimDropdown: Handsontable.GridSettings['trimDropdown'];
    type: Handsontable.GridSettings['type'];
    uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];
    validator: Handsontable.GridSettings['validator'];
    visibleRows: Handsontable.GridSettings['visibleRows'];
    width: Handsontable.GridSettings['width'];
    wordWrap: Handsontable.GridSettings['wordWrap'];
    constructor(parentComponent: HotTableComponent);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HotColumnComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HotColumnComponent, "hot-column", never, {
    "allowEmpty": "allowEmpty";
    "allowHtml": "allowHtml";
    "allowInvalid": "allowInvalid";
    "checkedTemplate": "checkedTemplate";
    "className": "className";
    "columnSorting": "columnSorting";
    "colWidths": "colWidths";
    "commentedCellClassName": "commentedCellClassName";
    "copyable": "copyable";
    "correctFormat": "correctFormat";
    "data": "data";
    "dateFormat": "dateFormat";
    "defaultDate": "defaultDate";
    "editor": "editor";
    "filteringCaseSensitive": "filteringCaseSensitive";
    "invalidCellClassName": "invalidCellClassName";
    "label": "label";
    "noWordWrapClassName": "noWordWrapClassName";
    "numericFormat": "numericFormat";
    "placeholder": "placeholder";
    "placeholderCellClassName": "placeholderCellClassName";
    "readOnly": "readOnly";
    "readOnlyCellClassName": "readOnlyCellClassName";
    "renderer": "renderer";
    "selectOptions": "selectOptions";
    "skipColumnOnPaste": "skipColumnOnPaste";
    "sortByRelevance": "sortByRelevance";
    "source": "source";
    "strict": "strict";
    "title": "title";
    "trimDropdown": "trimDropdown";
    "type": "type";
    "uncheckedTemplate": "uncheckedTemplate";
    "validator": "validator";
    "visibleRows": "visibleRows";
    "width": "width";
    "wordWrap": "wordWrap";
}, {}, never>;
}

//# sourceMappingURL=hot-column.component.d.ts.map