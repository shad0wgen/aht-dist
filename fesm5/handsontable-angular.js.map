{"version":3,"file":"handsontable-angular.js","sources":["ng://@handsontable/angular/lib/hot-table-registerer.service.ts","ng://@handsontable/angular/lib/hot-settings-resolver.service.ts","ng://@handsontable/angular/lib/hot-table.component.ts","ng://@handsontable/angular/lib/hot-column.component.ts","ng://@handsontable/angular/lib/hot-table.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Handsontable from 'handsontable';\n\nconst instances = new Map<string, Handsontable>();\n\n@Injectable()\nexport class HotTableRegisterer {\n  public getInstance(id: string): Handsontable {\n    return instances.get(id);\n  }\n\n  public registerInstance(id: string, instance: Handsontable): Map<string, Handsontable> {\n    return instances.set(id, instance);\n  }\n\n  public removeInstance(id: string): boolean {\n    return instances.delete(id);\n  }\n}\n","import { Injectable, SimpleChanges } from '@angular/core';\nimport Handsontable from 'handsontable';\n\nconst AVAILABLE_OPTIONS: string[] = Object.keys(Handsontable.DefaultSettings.prototype);\nconst AVAILABLE_HOOKS: string[] = Handsontable.hooks.getRegistered();\n\n@Injectable()\nexport class HotSettingsResolver {\n  mergeSettings(component): object {\n    const isSettingsObject = typeof component['settings'] === 'object';\n    const mergedSettings: Handsontable.GridSettings = isSettingsObject ? component['settings'] : {};\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n\n    options.forEach(key => {\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n      let option;\n\n      if (isSettingsObject && isHook) {\n        option = component['settings'][key];\n      }\n\n      if (component[key] !== void 0) {\n        option = component[key];\n      }\n\n      if (option === void 0) {\n        return;\n\n      } else if (typeof option === 'function' && isHook) {\n        mergedSettings[key] = function(...args) {\n          return component._ngZone.run(() => {\n              return option.apply(this, args);\n          });\n        };\n\n      } else {\n        mergedSettings[key] = option;\n      }\n    });\n\n    return mergedSettings;\n  }\n\n  prepareChanges(changes: SimpleChanges): Handsontable.GridSettings {\n    const result: Handsontable.GridSettings = {};\n    const parameters: string[] = Object.keys(changes);\n\n    parameters.forEach((param) => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n\n    return result;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport Handsontable from 'handsontable';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\nimport { HotColumnComponent } from './hot-column.component';\n\n@Component({\n  selector: 'hot-table',\n  template: '<div #container [id]=\"hotId\"></div>',\n  encapsulation: ViewEncapsulation.None,\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\n})\nexport class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @ViewChild('container', { static: false }) public container;\n\n  private hotInstance: Handsontable;\n  private columnsComponents: HotColumnComponent[] = [];\n  // component inputs\n  @Input() settings: Handsontable.GridSettings;\n  @Input() hotId = '';\n  // handsontable options\n  @Input() activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\n  @Input() allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];\n  @Input() allowInsertRow: Handsontable.GridSettings['allowInsertRow'];\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\n  @Input() allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];\n  @Input() allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];\n  @Input() autoColumnSize: Handsontable.GridSettings['autoColumnSize'];\n  @Input() autoRowSize: Handsontable.GridSettings['autoRowSize'];\n  @Input() autoWrapCol: Handsontable.GridSettings['autoWrapCol'];\n  @Input() autoWrapRow: Handsontable.GridSettings['autoWrapRow'];\n  @Input() bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];\n  @Input() cell: Handsontable.GridSettings['cell'];\n  @Input() cells: Handsontable.GridSettings['cells'];\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\n  @Input() className: Handsontable.GridSettings['className'];\n  @Input() colHeaders: Handsontable.GridSettings['colHeaders'];\n  @Input() collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];\n  @Input() columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];\n  @Input() columns: Handsontable.GridSettings['columns'];\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\n  @Input() columnSummary: Handsontable.GridSettings['columnSummary'];\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\n  @Input() comments: Handsontable.GridSettings['comments'];\n  @Input() contextMenu: Handsontable.GridSettings['contextMenu'];\n  @Input() copyable: Handsontable.GridSettings['copyable'];\n  @Input() copyPaste: Handsontable.GridSettings['copyPaste'];\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\n  @Input() currentColClassName: Handsontable.GridSettings['currentColClassName'];\n  @Input() currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];\n  @Input() currentRowClassName: Handsontable.GridSettings['currentRowClassName'];\n  @Input() customBorders: Handsontable.GridSettings['customBorders'];\n  @Input() data: Handsontable.GridSettings['data'];\n  @Input() dataSchema: Handsontable.GridSettings['dataSchema'];\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\n  @Input() debug: Handsontable.GridSettings['debug'];\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\n  @Input() disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];\n  @Input() dragToScroll: Handsontable.GridSettings['dragToScroll'];\n  @Input() dropdownMenu: Handsontable.GridSettings['dropdownMenu'];\n  @Input() editor: Handsontable.GridSettings['editor'];\n  @Input() enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];\n  @Input() enterMoves: Handsontable.GridSettings['enterMoves'];\n  @Input() fillHandle: Handsontable.GridSettings['fillHandle'];\n  @Input() filter: Handsontable.GridSettings['filter'];\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\n  @Input() filters: Handsontable.GridSettings['filters'];\n  @Input() fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];\n  @Input() fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];\n  @Input() fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];\n  @Input() formulas: Handsontable.GridSettings['formulas'];\n  @Input() fragmentSelection: Handsontable.GridSettings['fragmentSelection'];\n  @Input() ganttChart: Handsontable.GridSettings['ganttChart'];\n  @Input() headerTooltips: Handsontable.GridSettings['headerTooltips'];\n  @Input() height: Handsontable.GridSettings['height'];\n  @Input() hiddenColumns: Handsontable.GridSettings['hiddenColumns'];\n  @Input() hiddenRows: Handsontable.GridSettings['hiddenRows'];\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\n  @Input() label: Handsontable.GridSettings['label'];\n  @Input() language: Handsontable.GridSettings['language'];\n  @Input() licenseKey: Handsontable.GridSettings['licenseKey'];\n  @Input() manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];\n  @Input() manualColumnMove: Handsontable.GridSettings['manualColumnMove'];\n  @Input() manualColumnResize: Handsontable.GridSettings['manualColumnResize'];\n  @Input() manualRowMove: Handsontable.GridSettings['manualRowMove'];\n  @Input() manualRowResize: Handsontable.GridSettings['manualRowResize'];\n  @Input() maxCols: Handsontable.GridSettings['maxCols'];\n  @Input() maxRows: Handsontable.GridSettings['maxRows'];\n  @Input() mergeCells: Handsontable.GridSettings['mergeCells'];\n  @Input() minCols: Handsontable.GridSettings['minCols'];\n  @Input() minRows: Handsontable.GridSettings['minRows'];\n  @Input() minSpareCols: Handsontable.GridSettings['minSpareCols'];\n  @Input() minSpareRows: Handsontable.GridSettings['minSpareRows'];\n  @Input() multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];\n  @Input() nestedHeaders: Handsontable.GridSettings['nestedHeaders'];\n  @Input() nestedRows: Handsontable.GridSettings['nestedRows'];\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\n  @Input() observeChanges: Handsontable.GridSettings['observeChanges'];\n  @Input() observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];\n  @Input() outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];\n  @Input() persistentState: Handsontable.GridSettings['persistentState'];\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\n  @Input() preventOverflow: Handsontable.GridSettings['preventOverflow'];\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\n  @Input() renderAllRows: Handsontable.GridSettings['renderAllRows'];\n  @Input() renderer: Handsontable.GridSettings['renderer'];\n  @Input() rowHeaders: Handsontable.GridSettings['rowHeaders'];\n  @Input() rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];\n  @Input() rowHeights: Handsontable.GridSettings['rowHeights'];\n  @Input() search: Handsontable.GridSettings['search'];\n  @Input() selectionMode: Handsontable.GridSettings['selectionMode'];\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\n  @Input() skipRowOnPaste: any;\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\n  @Input() source: Handsontable.GridSettings['source'];\n  @Input() startCols: Handsontable.GridSettings['startCols'];\n  @Input() startRows: Handsontable.GridSettings['startRows'];\n  @Input() stretchH: Handsontable.GridSettings['stretchH'];\n  @Input() strict: Handsontable.GridSettings['strict'];\n  @Input() tableClassName: Handsontable.GridSettings['tableClassName'];\n  @Input() tabMoves: Handsontable.GridSettings['tabMoves'];\n  @Input() title: Handsontable.GridSettings['title'];\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\n  @Input() trimRows: Handsontable.GridSettings['nestedRows'];\n  @Input() trimWhitespace: Handsontable.GridSettings['trimWhitespace'];\n  @Input() type: Handsontable.GridSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\n  @Input() undo: Handsontable.GridSettings['undo'];\n  @Input() validator: Handsontable.GridSettings['validator'];\n  @Input() viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];\n  @Input() viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\n  @Input() width: Handsontable.GridSettings['width'];\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\n\n  // handsontable hooks\n  @Input() afterAddChild: Handsontable.GridSettings['afterAddChild'];\n  @Input() afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];\n  @Input() afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];\n  @Input() afterChange: Handsontable.GridSettings['afterChange'];\n  @Input() afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];\n  @Input() afterColumnMove: Handsontable.GridSettings['afterColumnMove'];\n  @Input() afterColumnResize: Handsontable.GridSettings['afterColumnResize'];\n  @Input() afterColumnSort: Handsontable.GridSettings['afterColumnSort'];\n  @Input() afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];\n  @Input() afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];\n  @Input() afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];\n  @Input() afterCopy: Handsontable.GridSettings['afterCopy'];\n  @Input() afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];\n  @Input() afterCreateCol: Handsontable.GridSettings['afterCreateCol'];\n  @Input() afterCreateRow: Handsontable.GridSettings['afterCreateRow'];\n  @Input() afterCut: Handsontable.GridSettings['afterCut'];\n  @Input() afterDeselect: Handsontable.GridSettings['afterDeselect'];\n  @Input() afterDestroy: Handsontable.GridSettings['afterDestroy'];\n  @Input() afterDetachChild: Handsontable.GridSettings['afterDetachChild'];\n  @Input() afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];\n  @Input() afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];\n  @Input() afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];\n  @Input() afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];\n  @Input() afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];\n  @Input() afterFilter: Handsontable.GridSettings['afterFilter'];\n  @Input() afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];\n  @Input() afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];\n  @Input() afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];\n  @Input() afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];\n  @Input() afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];\n  @Input() afterHideColumns: Handsontable.GridSettings['afterHideColumns'];\n  @Input() afterHideRows: Handsontable.GridSettings['afterHideRows'];\n  @Input() afterInit: Handsontable.GridSettings['afterInit'];\n  @Input() afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];\n  @Input() afterListen: Handsontable.GridSettings['afterListen'];\n  @Input() afterLoadData: Handsontable.GridSettings['afterLoadData'];\n  @Input() afterMergeCells: Handsontable.GridSettings['afterMergeCells'];\n  @Input() afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];\n  @Input() afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];\n  @Input() afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];\n  @Input() afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];\n  @Input() afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];\n  @Input() afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];\n  @Input() afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];\n  @Input() afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];\n  @Input() afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];\n  @Input() afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];\n  @Input() afterPaste: Handsontable.GridSettings['afterPaste'];\n  @Input() afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];\n  @Input() afterRedo: Handsontable.GridSettings['afterRedo'];\n  @Input() afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];\n  @Input() afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];\n  @Input() afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];\n  @Input() afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];\n  @Input() afterRender: Handsontable.GridSettings['afterRender'];\n  @Input() afterRenderer: Handsontable.GridSettings['afterRenderer'];\n  @Input() afterRowMove: Handsontable.GridSettings['afterRowMove'];\n  @Input() afterRowResize: Handsontable.GridSettings['afterRowResize'];\n  @Input() afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];\n  @Input() afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];\n  @Input() afterSelection: Handsontable.GridSettings['afterSelection'];\n  @Input() afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];\n  @Input() afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];\n  @Input() afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];\n  @Input() afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];\n  @Input() afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];\n  @Input() afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];\n  @Input() afterTrimRow: Handsontable.GridSettings['afterTrimRow'];\n  @Input() afterUndo: Handsontable.GridSettings['afterUndo'];\n  @Input() afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];\n  @Input() afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];\n  @Input() afterUnlisten: Handsontable.GridSettings['afterUnlisten'];\n  @Input() afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];\n  @Input() afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];\n  @Input() afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];\n  @Input() afterValidate: Handsontable.GridSettings['afterValidate'];\n  @Input() afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];\n  @Input() afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];\n  @Input() beforeAddChild: Handsontable.GridSettings['beforeAddChild'];\n  @Input() beforeAutofill: Handsontable.GridSettings['beforeAutofill'];\n  @Input() beforeAutofillInsidePopulate: Handsontable.GridSettings['beforeAutofillInsidePopulate'];\n  @Input() beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];\n  @Input() beforeChange: Handsontable.GridSettings['beforeChange'];\n  @Input() beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];\n  @Input() beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];\n  @Input() beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];\n  @Input() beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];\n  @Input() beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];\n  @Input() beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];\n  @Input() beforeCopy: Handsontable.GridSettings['beforeCopy'];\n  @Input() beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];\n  @Input() beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];\n  @Input() beforeCut: Handsontable.GridSettings['beforeCut'];\n  @Input() beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];\n  @Input() beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];\n  @Input() beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];\n  @Input() beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];\n  @Input() beforeFilter: Handsontable.GridSettings['beforeFilter'];\n  @Input() beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];\n  @Input() beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];\n  @Input() beforeHideRows: Handsontable.GridSettings['beforeHideRows'];\n  @Input() beforeInit: Handsontable.GridSettings['beforeInit'];\n  @Input() beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];\n  @Input() beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];\n  @Input() beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];\n  @Input() beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];\n  @Input() beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];\n  @Input() beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];\n  @Input() beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];\n  @Input() beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];\n  @Input() beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];\n  @Input() beforePaste: Handsontable.GridSettings['beforePaste'];\n  @Input() beforeRedo: Handsontable.GridSettings['beforeRedo'];\n  @Input() beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];\n  @Input() beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];\n  @Input() beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];\n  @Input() beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];\n  @Input() beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];\n  @Input() beforeRender: Handsontable.GridSettings['beforeRender'];\n  @Input() beforeRenderer: Handsontable.GridSettings['beforeRenderer'];\n  @Input() beforeRowMove: Handsontable.GridSettings['beforeRowMove'];\n  @Input() beforeRowResize: Handsontable.GridSettings['beforeRowResize'];\n  @Input() beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];\n  @Input() beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];\n  @Input() beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];\n  @Input() beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];\n  @Input() beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];\n  @Input() beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];\n  @Input() beforeUndo: Handsontable.GridSettings['beforeUndo'];\n  @Input() beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];\n  @Input() beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];\n  @Input() beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];\n  @Input() beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];\n  @Input() beforeValidate: Handsontable.GridSettings['beforeValidate'];\n  @Input() beforeValueRender: Handsontable.GridSettings['beforeValueRender'];\n  @Input() construct: Handsontable.GridSettings['construct'];\n  @Input() hiddenColumn: Handsontable.GridSettings['hiddenColumn'];\n  @Input() hiddenRow: Handsontable.GridSettings['hiddenRow'];\n  @Input() init: Handsontable.GridSettings['init'];\n  @Input() modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];\n  @Input() modifyCol: Handsontable.GridSettings['modifyCol'];\n  @Input() modifyColHeader: Handsontable.GridSettings['modifyColHeader'];\n  @Input() modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];\n  @Input() modifyColWidth: Handsontable.GridSettings['modifyColWidth'];\n  @Input() modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];\n  @Input() modifyData: Handsontable.GridSettings['modifyData'];\n  @Input() modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];\n  @Input() modifyRow: Handsontable.GridSettings['modifyRow'];\n  @Input() modifyRowData: Handsontable.GridSettings['modifyRowData'];\n  @Input() modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];\n  @Input() modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];\n  @Input() modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];\n  @Input() modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];\n  @Input() modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];\n  @Input() persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];\n  @Input() persistentStateReset: Handsontable.GridSettings['persistentStateReset'];\n  @Input() persistentStateSave: Handsontable.GridSettings['persistentStateSave'];\n  @Input() skipLengthCache: Handsontable.GridSettings['skipLengthCache'];\n  @Input() unmodifyCol: Handsontable.GridSettings['unmodifyCol'];\n  @Input() unmodifyRow: Handsontable.GridSettings['unmodifyRow'];\n\n  constructor(\n    private _ngZone: NgZone,\n    private _hotTableRegisterer: HotTableRegisterer,\n    private _hotSettingsResolver: HotSettingsResolver,\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: Handsontable.GridSettings = this._hotSettingsResolver.mergeSettings(this);\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      options['columns'] = columns;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n\n      if (this.hotId) {\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n      }\n      // @ts-ignore\n      this.hotInstance.init();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.hotInstance === void 0) {\n      return;\n    }\n\n    const newOptions: Handsontable.GridSettings = this._hotSettingsResolver.prepareChanges(changes);\n\n    this.updateHotTable(newOptions);\n  }\n\n  ngOnDestroy(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.destroy();\n    });\n\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n  }\n\n  updateHotTable(newSettings: Handsontable.GridSettings ): void {\n    if (!this.hotInstance) {\n      return;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.updateSettings(newSettings, false);\n    });\n  }\n\n  onAfterColumnsChange(): void {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n\n    if (this.columnsComponents.length > 0) {\n      const columns: Handsontable.ColumnSettings[] = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      const newOptions = {\n        columns: columns\n      };\n\n      this.updateHotTable(newOptions);\n    }\n  }\n\n  onAfterColumnsNumberChange(): void {\n    const columns: Handsontable.ColumnSettings[] = [];\n\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n\n    this.updateHotTable({ columns });\n  }\n\n  addColumn(column: HotColumnComponent): void {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n\n  removeColumn(column: HotColumnComponent): void {\n    const index: number = this.columnsComponents.indexOf(column);\n\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Input,\n} from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport Handsontable from 'handsontable';\n\n@Component({\n  selector: 'hot-column',\n  template: '',\n})\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\n  private firstRun = true;\n  // handsontable column options\n  @Input() allowEmpty: Handsontable.ColumnSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.ColumnSettings['allowHtml'];\n  @Input() allowInvalid: Handsontable.ColumnSettings['allowInvalid'];\n  @Input() checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];\n  @Input() className: Handsontable.ColumnSettings['className'];\n  @Input() columnSorting: Handsontable.ColumnSettings['columnSorting'];\n  @Input() colWidths: Handsontable.ColumnSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];\n  @Input() copyable: Handsontable.ColumnSettings['copyable'];\n  @Input() correctFormat: Handsontable.ColumnSettings['correctFormat'];\n  @Input() data: Handsontable.ColumnSettings['data'];\n  @Input() dateFormat: Handsontable.ColumnSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.ColumnSettings['defaultDate'];\n  @Input() editor: Handsontable.ColumnSettings['editor'];\n  @Input() filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];\n  @Input() invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];\n  @Input() label: Handsontable.ColumnSettings['label'];\n  @Input() language: Handsontable.ColumnSettings['language'];\n  @Input() noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.ColumnSettings['numericFormat'];\n  @Input() placeholder: Handsontable.ColumnSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];\n  @Input() readOnly: Handsontable.ColumnSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];\n  @Input() renderer: Handsontable.ColumnSettings['renderer'];\n  @Input() selectOptions: Handsontable.ColumnSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];\n  @Input() sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];\n  @Input() source: Handsontable.ColumnSettings['source'];\n  @Input() strict: Handsontable.ColumnSettings['strict'];\n  @Input() title: Handsontable.ColumnSettings['title'];\n  @Input() trimDropdown: Handsontable.ColumnSettings['trimDropdown'];\n  @Input() type: Handsontable.ColumnSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];\n  @Input() validator: Handsontable.ColumnSettings['validator'];\n  @Input() visibleRows: Handsontable.ColumnSettings['visibleRows'];\n  @Input() width: Handsontable.ColumnSettings['width'];\n  @Input() wordWrap: Handsontable.ColumnSettings['wordWrap'];\n\n  constructor(private parentComponent: HotTableComponent) {}\n\n  ngOnInit(): void {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n\n  ngOnChanges(): void {\n    if (this.firstRun) {\n      return;\n    }\n\n    this.parentComponent.onAfterColumnsChange();\n  }\n\n  ngOnDestroy(): void {\n    this.parentComponent.removeColumn(this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport { HotColumnComponent } from './hot-column.component';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\n\n/**\n * Angular prevents use static public getters under NgModule decorator.\n * Moreover, ngc doesn't allow importing `Version` from external file.\n */\nclass Version {\n  public static get version(): string {\n    return '5.1.1';\n  }\n}\n\n@NgModule({\n  declarations: [\n    HotTableComponent,\n    HotColumnComponent,\n  ],\n  exports: [\n    HotTableComponent,\n    HotColumnComponent,\n  ]\n})\nexport class HotTableModule extends Version {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: HotTableModule,\n      providers: [ HotTableRegisterer ],\n    };\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;AAAA;IAGM,SAAS,GAAG,IAAI,GAAG,EAAwB;AAEjD;IAAA;KAaC;;;;;IAXQ,wCAAW;;;;IAAlB,UAAmB,EAAU;QAC3B,OAAO,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;KAC1B;;;;;;IAEM,6CAAgB;;;;;IAAvB,UAAwB,EAAU,EAAE,QAAsB;QACxD,OAAO,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;KACpC;;;;;IAEM,2CAAc;;;;IAArB,UAAsB,EAAU;QAC9B,OAAO,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KAC7B;;gBAZF,UAAU;;IAaX,yBAAC;CAbD;;;;;;ACLA;IAGM,iBAAiB,GAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC;;IACjF,eAAe,GAAa,YAAY,CAAC,KAAK,CAAC,aAAa,EAAE;AAEpE;IAAA;KAiDC;;;;;IA/CC,2CAAa;;;;IAAb,UAAc,SAAS;;YACf,gBAAgB,GAAG,OAAO,SAAS,CAAC,UAAU,CAAC,KAAK,QAAQ;;YAC5D,cAAc,GAA8B,gBAAgB,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE;;YACzF,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAEzD,OAAO,CAAC,OAAO;;;;QAAC,UAAA,GAAG;;gBACX,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;gBAC5C,MAAM;YAEV,IAAI,gBAAgB,IAAI,MAAM,EAAE;gBAC9B,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;gBAC7B,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;aACzB;YAED,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;gBACrB,OAAO;aAER;iBAAM,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,EAAE;gBACjD,cAAc,CAAC,GAAG,CAAC;;;;gBAAG;oBAAA,iBAIrB;oBAJ8B,cAAO;yBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;wBAAP,yBAAO;;oBACpC,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG;;;oBAAC;wBACzB,OAAO,MAAM,CAAC,KAAK,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;qBACnC,EAAC,CAAC;iBACJ,CAAA,CAAC;aAEH;iBAAM;gBACL,cAAc,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;aAC9B;SACF,EAAC,CAAC;QAEH,OAAO,cAAc,CAAC;KACvB;;;;;IAED,4CAAc;;;;IAAd,UAAe,OAAsB;;YAC7B,MAAM,GAA8B,EAAE;;YACtC,UAAU,GAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QAEjD,UAAU,CAAC,OAAO;;;;QAAC,UAAC,KAAK;YACvB,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACjC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;aAC7C;SACF,EAAC,CAAC;QAEH,OAAO,MAAM,CAAC;KACf;;gBAhDF,UAAU;;IAiDX,0BAAC;CAjDD;;;;;;ACNA;IA0TE,2BACU,OAAe,EACf,mBAAuC,EACvC,oBAAyC;QAFzC,YAAO,GAAP,OAAO,CAAQ;QACf,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvC,yBAAoB,GAApB,oBAAoB,CAAqB;QAnS3C,sBAAiB,GAAyB,EAAE,CAAC;QAG5C,UAAK,GAAG,EAAE,CAAC;KAiShB;;;;IAEJ,2CAAe;;;IAAf;QAAA,iBAsBC;;YArBO,OAAO,GAA8B,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC;QAExF,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;;gBAC/B,SAAO,GAAG,EAAE;YAElB,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;YAAC,UAAC,MAAM;gBACpC,SAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/D,EAAC,CAAC;YAEH,OAAO,CAAC,SAAS,CAAC,GAAG,SAAO,CAAC;SAC9B;QAED,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;QAAC;YAC7B,KAAI,CAAC,WAAW,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAEhF,IAAI,KAAI,CAAC,KAAK,EAAE;gBACd,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;aACzE;;YAED,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB,EAAC,CAAC;KACJ;;;;;IAED,uCAAW;;;;IAAX,UAAY,OAAsB;QAChC,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,EAAE;YAC/B,OAAO;SACR;;YAEK,UAAU,GAA8B,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,OAAO,CAAC;QAE/F,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;KACjC;;;;IAED,uCAAW;;;IAAX;QAAA,iBAQC;QAPC,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;QAAC;YAC7B,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;SAC5B,EAAC,CAAC;QAEH,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrD;KACF;;;;;IAED,0CAAc;;;;IAAd,UAAe,WAAsC;QAArD,iBAQC;QAPC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;QAAC;YAC7B,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;SACrD,EAAC,CAAC;KACJ;;;;IAED,gDAAoB;;;IAApB;QAAA,iBAkBC;QAjBC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,CAAC,EAAE;YACrC,OAAO;SACR;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;;gBAC/B,SAAO,GAAkC,EAAE;YAEjD,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;YAAC,UAAC,MAAM;gBACpC,SAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/D,EAAC,CAAC;;gBAEG,UAAU,GAAG;gBACjB,OAAO,EAAE,SAAO;aACjB;YAED,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;SACjC;KACF;;;;IAED,sDAA0B;;;IAA1B;QAAA,iBAUC;;YATO,OAAO,GAAkC,EAAE;QAEjD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;YAAC,UAAC,MAAM;gBACpC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/D,EAAC,CAAC;SACJ;QAED,IAAI,CAAC,cAAc,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;KAClC;;;;;IAED,qCAAS;;;;IAAT,UAAU,MAA0B;QAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;;;;;IAED,wCAAY;;;;IAAZ,UAAa,MAA0B;;YAC/B,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC;QAE5D,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,0BAA0B,EAAE,CAAC;KACnC;;gBAhZF,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,qCAAqC;oBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,SAAS,EAAE,CAAE,kBAAkB,EAAE,mBAAmB,CAAE;iBACvD;;;;gBAjBC,MAAM;gBAQC,kBAAkB;gBAClB,mBAAmB;;;4BAUzB,SAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;2BAKxC,KAAK;wBACL,KAAK;wCAEL,KAAK;6BACL,KAAK;4BACL,KAAK;oCACL,KAAK;iCACL,KAAK;+BACL,KAAK;oCACL,KAAK;iCACL,KAAK;iCACL,KAAK;8BACL,KAAK;8BACL,KAAK;8BACL,KAAK;sCACL,KAAK;uBACL,KAAK;wBACL,KAAK;kCACL,KAAK;4BACL,KAAK;6BACL,KAAK;qCACL,KAAK;qCACL,KAAK;0BACL,KAAK;gCACL,KAAK;gCACL,KAAK;4BACL,KAAK;yCACL,KAAK;2BACL,KAAK;8BACL,KAAK;2BACL,KAAK;4BACL,KAAK;gCACL,KAAK;sCACL,KAAK;yCACL,KAAK;sCACL,KAAK;gCACL,KAAK;uBACL,KAAK;6BACL,KAAK;6BACL,KAAK;wBACL,KAAK;8BACL,KAAK;yCACL,KAAK;+BACL,KAAK;+BACL,KAAK;yBACL,KAAK;qCACL,KAAK;6BACL,KAAK;6BACL,KAAK;yBACL,KAAK;yCACL,KAAK;0BACL,KAAK;mCACL,KAAK;kCACL,KAAK;+BACL,KAAK;2BACL,KAAK;oCACL,KAAK;6BACL,KAAK;iCACL,KAAK;yBACL,KAAK;gCACL,KAAK;6BACL,KAAK;uCACL,KAAK;wBACL,KAAK;2BACL,KAAK;6BACL,KAAK;qCACL,KAAK;mCACL,KAAK;qCACL,KAAK;gCACL,KAAK;kCACL,KAAK;0BACL,KAAK;0BACL,KAAK;6BACL,KAAK;0BACL,KAAK;0BACL,KAAK;+BACL,KAAK;+BACL,KAAK;qCACL,KAAK;gCACL,KAAK;6BACL,KAAK;sCACL,KAAK;gCACL,KAAK;iCACL,KAAK;uCACL,KAAK;wCACL,KAAK;kCACL,KAAK;8BACL,KAAK;2CACL,KAAK;kCACL,KAAK;2BACL,KAAK;wCACL,KAAK;gCACL,KAAK;2BACL,KAAK;6BACL,KAAK;iCACL,KAAK;6BACL,KAAK;yBACL,KAAK;gCACL,KAAK;gCACL,KAAK;oCACL,KAAK;iCACL,KAAK;kCACL,KAAK;yBACL,KAAK;4BACL,KAAK;4BACL,KAAK;2BACL,KAAK;yBACL,KAAK;iCACL,KAAK;2BACL,KAAK;wBACL,KAAK;+BACL,KAAK;2BACL,KAAK;iCACL,KAAK;uBACL,KAAK;oCACL,KAAK;uBACL,KAAK;4BACL,KAAK;gDACL,KAAK;6CACL,KAAK;8BACL,KAAK;wBACL,KAAK;2BACL,KAAK;gCAGL,KAAK;oCACL,KAAK;qCACL,KAAK;8BACL,KAAK;uCACL,KAAK;kCACL,KAAK;oCACL,KAAK;kCACL,KAAK;iDACL,KAAK;uCACL,KAAK;uCACL,KAAK;4BACL,KAAK;iCACL,KAAK;iCACL,KAAK;iCACL,KAAK;2BACL,KAAK;gCACL,KAAK;+BACL,KAAK;mCACL,KAAK;uCACL,KAAK;qCACL,KAAK;kDACL,KAAK;wCACL,KAAK;wCACL,KAAK;8BACL,KAAK;mCACL,KAAK;oCACL,KAAK;gDACL,KAAK;oCACL,KAAK;6CACL,KAAK;mCACL,KAAK;gCACL,KAAK;4BACL,KAAK;sCACL,KAAK;8BACL,KAAK;gCACL,KAAK;kCACL,KAAK;0CACL,KAAK;4CACL,KAAK;sCACL,KAAK;yCACL,KAAK;4CACL,KAAK;6CACL,KAAK;uCACL,KAAK;sCACL,KAAK;uCACL,KAAK;qCACL,KAAK;6BACL,KAAK;0CACL,KAAK;4BACL,KAAK;yCACL,KAAK;sCACL,KAAK;iCACL,KAAK;iCACL,KAAK;8BACL,KAAK;gCACL,KAAK;+BACL,KAAK;iCACL,KAAK;0CACL,KAAK;wCACL,KAAK;iCACL,KAAK;uCACL,KAAK;oCACL,KAAK;0CACL,KAAK;mCACL,KAAK;qCACL,KAAK;wCACL,KAAK;+BACL,KAAK;4BACL,KAAK;qCACL,KAAK;kCACL,KAAK;gCACL,KAAK;oCACL,KAAK;iCACL,KAAK;sCACL,KAAK;gCACL,KAAK;wDACL,KAAK;qDACL,KAAK;iCACL,KAAK;iCACL,KAAK;+CACL,KAAK;sCACL,KAAK;+BACL,KAAK;qCACL,KAAK;mCACL,KAAK;qCACL,KAAK;mCACL,KAAK;4CACL,KAAK;wCACL,KAAK;6BACL,KAAK;kCACL,KAAK;kCACL,KAAK;4BACL,KAAK;oCACL,KAAK;oCACL,KAAK;6CACL,KAAK;yCACL,KAAK;+BACL,KAAK;oCACL,KAAK;oCACL,KAAK;iCACL,KAAK;6BACL,KAAK;wCACL,KAAK;gCACL,KAAK;uCACL,KAAK;mCACL,KAAK;0CACL,KAAK;wCACL,KAAK;uCACL,KAAK;wCACL,KAAK;sCACL,KAAK;8BACL,KAAK;6BACL,KAAK;0CACL,KAAK;6CACL,KAAK;uCACL,KAAK;kCACL,KAAK;kCACL,KAAK;+BACL,KAAK;iCACL,KAAK;gCACL,KAAK;kCACL,KAAK;oCACL,KAAK;sCACL,KAAK;0CACL,KAAK;8CACL,KAAK;oCACL,KAAK;gCACL,KAAK;6BACL,KAAK;sCACL,KAAK;mCACL,KAAK;qCACL,KAAK;kCACL,KAAK;iCACL,KAAK;oCACL,KAAK;4BACL,KAAK;+BACL,KAAK;4BACL,KAAK;uBACL,KAAK;sCACL,KAAK;4BACL,KAAK;kCACL,KAAK;2CACL,KAAK;iCACL,KAAK;sCACL,KAAK;6BACL,KAAK;sCACL,KAAK;4BACL,KAAK;gCACL,KAAK;kCACL,KAAK;uCACL,KAAK;kCACL,KAAK;qCACL,KAAK;uCACL,KAAK;sCACL,KAAK;uCACL,KAAK;sCACL,KAAK;kCACL,KAAK;8BACL,KAAK;8BACL,KAAK;;IA0GR,wBAAC;CAlZD;;;;;;AChBA;IAwDE,4BAAoB,eAAkC;QAAlC,oBAAe,GAAf,eAAe,CAAmB;QAzC9C,aAAQ,GAAG,IAAI,CAAC;KAyCkC;;;;IAE1D,qCAAQ;;;IAAR;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACtC;;;;IAED,wCAAW;;;IAAX;QACE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC;KAC7C;;;;IAED,wCAAW;;;IAAX;QACE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACzC;;gBA/DF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,EAAE;iBACb;;;;gBANQ,iBAAiB;;;6BAUvB,KAAK;4BACL,KAAK;+BACL,KAAK;kCACL,KAAK;4BACL,KAAK;gCACL,KAAK;4BACL,KAAK;yCACL,KAAK;2BACL,KAAK;gCACL,KAAK;uBACL,KAAK;6BACL,KAAK;8BACL,KAAK;yBACL,KAAK;yCACL,KAAK;uCACL,KAAK;wBACL,KAAK;2BACL,KAAK;sCACL,KAAK;gCACL,KAAK;8BACL,KAAK;2CACL,KAAK;2BACL,KAAK;wCACL,KAAK;2BACL,KAAK;gCACL,KAAK;oCACL,KAAK;kCACL,KAAK;yBACL,KAAK;yBACL,KAAK;wBACL,KAAK;+BACL,KAAK;uBACL,KAAK;oCACL,KAAK;4BACL,KAAK;8BACL,KAAK;wBACL,KAAK;2BACL,KAAK;;IAoBR,yBAAC;CAhED;;;;;;;;;;ACDA;;;;;IAAA;KAIC;IAHC,sBAAkB,kBAAO;;;;QAAzB;YACE,OAAO,OAAO,CAAC;SAChB;;;OAAA;IACH,cAAC;CAAA,IAAA;AAED;IAUoCA,kCAAO;IAV3C;;KAiBC;;;;IANe,sBAAO;;;IAArB;QACE,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,CAAE,kBAAkB,CAAE;SAClC,CAAC;KACH;;gBAhBF,QAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,iBAAiB;wBACjB,kBAAkB;qBACnB;oBACD,OAAO,EAAE;wBACP,iBAAiB;wBACjB,kBAAkB;qBACnB;iBACF;;IAQD,qBAAC;CAAA,CAPmC,OAAO;;;;"}