{"version":3,"sources":["C:/git/ca5/source/ClientApp/node_modules/@handsontable/angular/fesm5/handsontable-angular.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gDAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;goBAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAMM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;+EAYM;AACN;AACA;AACA;AACA","file":"handsontable-angular.js","sourcesContent":["import { Injectable, Component, ViewEncapsulation, NgZone, ViewChild, Input, NgModule } from '@angular/core';\nimport Handsontable from 'handsontable';\nimport { __extends } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar instances = new Map();\nvar HotTableRegisterer = /** @class */ (function () {\n    function HotTableRegisterer() {\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    HotTableRegisterer.prototype.getInstance = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        return instances.get(id);\n    };\n    /**\n     * @param {?} id\n     * @param {?} instance\n     * @return {?}\n     */\n    HotTableRegisterer.prototype.registerInstance = /**\n     * @param {?} id\n     * @param {?} instance\n     * @return {?}\n     */\n    function (id, instance) {\n        return instances.set(id, instance);\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    HotTableRegisterer.prototype.removeInstance = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        return instances.delete(id);\n    };\n    HotTableRegisterer.decorators = [\n        { type: Injectable }\n    ];\n    return HotTableRegisterer;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar AVAILABLE_OPTIONS = Object.keys(Handsontable.DefaultSettings.prototype);\n/** @type {?} */\nvar AVAILABLE_HOOKS = Handsontable.hooks.getRegistered();\nvar HotSettingsResolver = /** @class */ (function () {\n    function HotSettingsResolver() {\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    HotSettingsResolver.prototype.mergeSettings = /**\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        /** @type {?} */\n        var isSettingsObject = typeof component['settings'] === 'object';\n        /** @type {?} */\n        var mergedSettings = isSettingsObject ? component['settings'] : {};\n        /** @type {?} */\n        var options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n        options.forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        function (key) {\n            /** @type {?} */\n            var isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n            /** @type {?} */\n            var option;\n            if (isSettingsObject && isHook) {\n                option = component['settings'][key];\n            }\n            if (component[key] !== void 0) {\n                option = component[key];\n            }\n            if (option === void 0) {\n                return;\n            }\n            else if (typeof option === 'function' && isHook) {\n                mergedSettings[key] = (/**\n                 * @param {...?} args\n                 * @return {?}\n                 */\n                function () {\n                    var _this = this;\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    return component._ngZone.run((/**\n                     * @return {?}\n                     */\n                    function () {\n                        return option.apply(_this, args);\n                    }));\n                });\n            }\n            else {\n                mergedSettings[key] = option;\n            }\n        }));\n        return mergedSettings;\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    HotSettingsResolver.prototype.prepareChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var result = {};\n        /** @type {?} */\n        var parameters = Object.keys(changes);\n        parameters.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        function (param) {\n            if (changes.hasOwnProperty(param)) {\n                result[param] = changes[param].currentValue;\n            }\n        }));\n        return result;\n    };\n    HotSettingsResolver.decorators = [\n        { type: Injectable }\n    ];\n    return HotSettingsResolver;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar HotTableComponent = /** @class */ (function () {\n    function HotTableComponent(_ngZone, _hotTableRegisterer, _hotSettingsResolver) {\n        this._ngZone = _ngZone;\n        this._hotTableRegisterer = _hotTableRegisterer;\n        this._hotSettingsResolver = _hotSettingsResolver;\n        this.columnsComponents = [];\n        this.hotId = '';\n    }\n    /**\n     * @return {?}\n     */\n    HotTableComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var options = this._hotSettingsResolver.mergeSettings(this);\n        if (this.columnsComponents.length > 0) {\n            /** @type {?} */\n            var columns_1 = [];\n            this.columnsComponents.forEach((/**\n             * @param {?} column\n             * @return {?}\n             */\n            function (column) {\n                columns_1.push(_this._hotSettingsResolver.mergeSettings(column));\n            }));\n            options['columns'] = columns_1;\n        }\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this.hotInstance = new Handsontable.Core(_this.container.nativeElement, options);\n            if (_this.hotId) {\n                _this._hotTableRegisterer.registerInstance(_this.hotId, _this.hotInstance);\n            }\n            // @ts-ignore\n            _this.hotInstance.init();\n        }));\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    HotTableComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this.hotInstance === void 0) {\n            return;\n        }\n        /** @type {?} */\n        var newOptions = this._hotSettingsResolver.prepareChanges(changes);\n        this.updateHotTable(newOptions);\n    };\n    /**\n     * @return {?}\n     */\n    HotTableComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this.hotInstance.destroy();\n        }));\n        if (this.hotId) {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n        }\n    };\n    /**\n     * @param {?} newSettings\n     * @return {?}\n     */\n    HotTableComponent.prototype.updateHotTable = /**\n     * @param {?} newSettings\n     * @return {?}\n     */\n    function (newSettings) {\n        var _this = this;\n        if (!this.hotInstance) {\n            return;\n        }\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this.hotInstance.updateSettings(newSettings, false);\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    HotTableComponent.prototype.onAfterColumnsChange = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.columnsComponents === void 0) {\n            return;\n        }\n        if (this.columnsComponents.length > 0) {\n            /** @type {?} */\n            var columns_2 = [];\n            this.columnsComponents.forEach((/**\n             * @param {?} column\n             * @return {?}\n             */\n            function (column) {\n                columns_2.push(_this._hotSettingsResolver.mergeSettings(column));\n            }));\n            /** @type {?} */\n            var newOptions = {\n                columns: columns_2\n            };\n            this.updateHotTable(newOptions);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HotTableComponent.prototype.onAfterColumnsNumberChange = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var columns = [];\n        if (this.columnsComponents.length > 0) {\n            this.columnsComponents.forEach((/**\n             * @param {?} column\n             * @return {?}\n             */\n            function (column) {\n                columns.push(_this._hotSettingsResolver.mergeSettings(column));\n            }));\n        }\n        this.updateHotTable({ columns: columns });\n    };\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    HotTableComponent.prototype.addColumn = /**\n     * @param {?} column\n     * @return {?}\n     */\n    function (column) {\n        this.columnsComponents.push(column);\n        this.onAfterColumnsNumberChange();\n    };\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    HotTableComponent.prototype.removeColumn = /**\n     * @param {?} column\n     * @return {?}\n     */\n    function (column) {\n        /** @type {?} */\n        var index = this.columnsComponents.indexOf(column);\n        this.columnsComponents.splice(index, 1);\n        this.onAfterColumnsNumberChange();\n    };\n    HotTableComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'hot-table',\n                    template: '<div #container [id]=\"hotId\"></div>',\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [HotTableRegisterer, HotSettingsResolver]\n                }] }\n    ];\n    /** @nocollapse */\n    HotTableComponent.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: HotTableRegisterer },\n        { type: HotSettingsResolver }\n    ]; };\n    HotTableComponent.propDecorators = {\n        container: [{ type: ViewChild, args: ['container', { static: false },] }],\n        settings: [{ type: Input }],\n        hotId: [{ type: Input }],\n        activeHeaderClassName: [{ type: Input }],\n        allowEmpty: [{ type: Input }],\n        allowHtml: [{ type: Input }],\n        allowInsertColumn: [{ type: Input }],\n        allowInsertRow: [{ type: Input }],\n        allowInvalid: [{ type: Input }],\n        allowRemoveColumn: [{ type: Input }],\n        allowRemoveRow: [{ type: Input }],\n        autoColumnSize: [{ type: Input }],\n        autoRowSize: [{ type: Input }],\n        autoWrapCol: [{ type: Input }],\n        autoWrapRow: [{ type: Input }],\n        bindRowsWithHeaders: [{ type: Input }],\n        cell: [{ type: Input }],\n        cells: [{ type: Input }],\n        checkedTemplate: [{ type: Input }],\n        className: [{ type: Input }],\n        colHeaders: [{ type: Input }],\n        collapsibleColumns: [{ type: Input }],\n        columnHeaderHeight: [{ type: Input }],\n        columns: [{ type: Input }],\n        columnSorting: [{ type: Input }],\n        columnSummary: [{ type: Input }],\n        colWidths: [{ type: Input }],\n        commentedCellClassName: [{ type: Input }],\n        comments: [{ type: Input }],\n        contextMenu: [{ type: Input }],\n        copyable: [{ type: Input }],\n        copyPaste: [{ type: Input }],\n        correctFormat: [{ type: Input }],\n        currentColClassName: [{ type: Input }],\n        currentHeaderClassName: [{ type: Input }],\n        currentRowClassName: [{ type: Input }],\n        customBorders: [{ type: Input }],\n        data: [{ type: Input }],\n        dataSchema: [{ type: Input }],\n        dateFormat: [{ type: Input }],\n        debug: [{ type: Input }],\n        defaultDate: [{ type: Input }],\n        disableVisualSelection: [{ type: Input }],\n        dragToScroll: [{ type: Input }],\n        dropdownMenu: [{ type: Input }],\n        editor: [{ type: Input }],\n        enterBeginsEditing: [{ type: Input }],\n        enterMoves: [{ type: Input }],\n        fillHandle: [{ type: Input }],\n        filter: [{ type: Input }],\n        filteringCaseSensitive: [{ type: Input }],\n        filters: [{ type: Input }],\n        fixedColumnsLeft: [{ type: Input }],\n        fixedRowsBottom: [{ type: Input }],\n        fixedRowsTop: [{ type: Input }],\n        formulas: [{ type: Input }],\n        fragmentSelection: [{ type: Input }],\n        ganttChart: [{ type: Input }],\n        headerTooltips: [{ type: Input }],\n        height: [{ type: Input }],\n        hiddenColumns: [{ type: Input }],\n        hiddenRows: [{ type: Input }],\n        invalidCellClassName: [{ type: Input }],\n        label: [{ type: Input }],\n        language: [{ type: Input }],\n        licenseKey: [{ type: Input }],\n        manualColumnFreeze: [{ type: Input }],\n        manualColumnMove: [{ type: Input }],\n        manualColumnResize: [{ type: Input }],\n        manualRowMove: [{ type: Input }],\n        manualRowResize: [{ type: Input }],\n        maxCols: [{ type: Input }],\n        maxRows: [{ type: Input }],\n        mergeCells: [{ type: Input }],\n        minCols: [{ type: Input }],\n        minRows: [{ type: Input }],\n        minSpareCols: [{ type: Input }],\n        minSpareRows: [{ type: Input }],\n        multiColumnSorting: [{ type: Input }],\n        nestedHeaders: [{ type: Input }],\n        nestedRows: [{ type: Input }],\n        noWordWrapClassName: [{ type: Input }],\n        numericFormat: [{ type: Input }],\n        observeChanges: [{ type: Input }],\n        observeDOMVisibility: [{ type: Input }],\n        outsideClickDeselects: [{ type: Input }],\n        persistentState: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        placeholderCellClassName: [{ type: Input }],\n        preventOverflow: [{ type: Input }],\n        readOnly: [{ type: Input }],\n        readOnlyCellClassName: [{ type: Input }],\n        renderAllRows: [{ type: Input }],\n        renderer: [{ type: Input }],\n        rowHeaders: [{ type: Input }],\n        rowHeaderWidth: [{ type: Input }],\n        rowHeights: [{ type: Input }],\n        search: [{ type: Input }],\n        selectionMode: [{ type: Input }],\n        selectOptions: [{ type: Input }],\n        skipColumnOnPaste: [{ type: Input }],\n        skipRowOnPaste: [{ type: Input }],\n        sortByRelevance: [{ type: Input }],\n        source: [{ type: Input }],\n        startCols: [{ type: Input }],\n        startRows: [{ type: Input }],\n        stretchH: [{ type: Input }],\n        strict: [{ type: Input }],\n        tableClassName: [{ type: Input }],\n        tabMoves: [{ type: Input }],\n        title: [{ type: Input }],\n        trimDropdown: [{ type: Input }],\n        trimRows: [{ type: Input }],\n        trimWhitespace: [{ type: Input }],\n        type: [{ type: Input }],\n        uncheckedTemplate: [{ type: Input }],\n        undo: [{ type: Input }],\n        validator: [{ type: Input }],\n        viewportColumnRenderingOffset: [{ type: Input }],\n        viewportRowRenderingOffset: [{ type: Input }],\n        visibleRows: [{ type: Input }],\n        width: [{ type: Input }],\n        wordWrap: [{ type: Input }],\n        afterAddChild: [{ type: Input }],\n        afterBeginEditing: [{ type: Input }],\n        afterCellMetaReset: [{ type: Input }],\n        afterChange: [{ type: Input }],\n        afterChangesObserved: [{ type: Input }],\n        afterColumnMove: [{ type: Input }],\n        afterColumnResize: [{ type: Input }],\n        afterColumnSort: [{ type: Input }],\n        afterContextMenuDefaultOptions: [{ type: Input }],\n        afterContextMenuHide: [{ type: Input }],\n        afterContextMenuShow: [{ type: Input }],\n        afterCopy: [{ type: Input }],\n        afterCopyLimit: [{ type: Input }],\n        afterCreateCol: [{ type: Input }],\n        afterCreateRow: [{ type: Input }],\n        afterCut: [{ type: Input }],\n        afterDeselect: [{ type: Input }],\n        afterDestroy: [{ type: Input }],\n        afterDetachChild: [{ type: Input }],\n        afterDocumentKeyDown: [{ type: Input }],\n        afterDrawSelection: [{ type: Input }],\n        afterDropdownMenuDefaultOptions: [{ type: Input }],\n        afterDropdownMenuHide: [{ type: Input }],\n        afterDropdownMenuShow: [{ type: Input }],\n        afterFilter: [{ type: Input }],\n        afterGetCellMeta: [{ type: Input }],\n        afterGetColHeader: [{ type: Input }],\n        afterGetColumnHeaderRenderers: [{ type: Input }],\n        afterGetRowHeader: [{ type: Input }],\n        afterGetRowHeaderRenderers: [{ type: Input }],\n        afterHideColumns: [{ type: Input }],\n        afterHideRows: [{ type: Input }],\n        afterInit: [{ type: Input }],\n        afterLanguageChange: [{ type: Input }],\n        afterListen: [{ type: Input }],\n        afterLoadData: [{ type: Input }],\n        afterMergeCells: [{ type: Input }],\n        afterModifyTransformEnd: [{ type: Input }],\n        afterModifyTransformStart: [{ type: Input }],\n        afterMomentumScroll: [{ type: Input }],\n        afterOnCellContextMenu: [{ type: Input }],\n        afterOnCellCornerDblClick: [{ type: Input }],\n        afterOnCellCornerMouseDown: [{ type: Input }],\n        afterOnCellMouseDown: [{ type: Input }],\n        afterOnCellMouseOut: [{ type: Input }],\n        afterOnCellMouseOver: [{ type: Input }],\n        afterOnCellMouseUp: [{ type: Input }],\n        afterPaste: [{ type: Input }],\n        afterPluginsInitialized: [{ type: Input }],\n        afterRedo: [{ type: Input }],\n        afterRefreshDimensions: [{ type: Input }],\n        afterRemoveCellMeta: [{ type: Input }],\n        afterRemoveCol: [{ type: Input }],\n        afterRemoveRow: [{ type: Input }],\n        afterRender: [{ type: Input }],\n        afterRenderer: [{ type: Input }],\n        afterRowMove: [{ type: Input }],\n        afterRowResize: [{ type: Input }],\n        afterScrollHorizontally: [{ type: Input }],\n        afterScrollVertically: [{ type: Input }],\n        afterSelection: [{ type: Input }],\n        afterSelectionByProp: [{ type: Input }],\n        afterSelectionEnd: [{ type: Input }],\n        afterSelectionEndByProp: [{ type: Input }],\n        afterSetCellMeta: [{ type: Input }],\n        afterSetDataAtCell: [{ type: Input }],\n        afterSetDataAtRowProp: [{ type: Input }],\n        afterTrimRow: [{ type: Input }],\n        afterUndo: [{ type: Input }],\n        afterUnhideColumns: [{ type: Input }],\n        afterUnhideRows: [{ type: Input }],\n        afterUnlisten: [{ type: Input }],\n        afterUnmergeCells: [{ type: Input }],\n        afterUntrimRow: [{ type: Input }],\n        afterUpdateSettings: [{ type: Input }],\n        afterValidate: [{ type: Input }],\n        afterViewportColumnCalculatorOverride: [{ type: Input }],\n        afterViewportRowCalculatorOverride: [{ type: Input }],\n        beforeAddChild: [{ type: Input }],\n        beforeAutofill: [{ type: Input }],\n        beforeAutofillInsidePopulate: [{ type: Input }],\n        beforeCellAlignment: [{ type: Input }],\n        beforeChange: [{ type: Input }],\n        beforeChangeRender: [{ type: Input }],\n        beforeColumnMove: [{ type: Input }],\n        beforeColumnResize: [{ type: Input }],\n        beforeColumnSort: [{ type: Input }],\n        beforeContextMenuSetItems: [{ type: Input }],\n        beforeContextMenuShow: [{ type: Input }],\n        beforeCopy: [{ type: Input }],\n        beforeCreateCol: [{ type: Input }],\n        beforeCreateRow: [{ type: Input }],\n        beforeCut: [{ type: Input }],\n        beforeDetachChild: [{ type: Input }],\n        beforeDrawBorders: [{ type: Input }],\n        beforeDropdownMenuSetItems: [{ type: Input }],\n        beforeDropdownMenuShow: [{ type: Input }],\n        beforeFilter: [{ type: Input }],\n        beforeGetCellMeta: [{ type: Input }],\n        beforeHideColumns: [{ type: Input }],\n        beforeHideRows: [{ type: Input }],\n        beforeInit: [{ type: Input }],\n        beforeInitWalkontable: [{ type: Input }],\n        beforeKeyDown: [{ type: Input }],\n        beforeLanguageChange: [{ type: Input }],\n        beforeMergeCells: [{ type: Input }],\n        beforeOnCellContextMenu: [{ type: Input }],\n        beforeOnCellMouseDown: [{ type: Input }],\n        beforeOnCellMouseOut: [{ type: Input }],\n        beforeOnCellMouseOver: [{ type: Input }],\n        beforeOnCellMouseUp: [{ type: Input }],\n        beforePaste: [{ type: Input }],\n        beforeRedo: [{ type: Input }],\n        beforeRefreshDimensions: [{ type: Input }],\n        beforeRemoveCellClassNames: [{ type: Input }],\n        beforeRemoveCellMeta: [{ type: Input }],\n        beforeRemoveCol: [{ type: Input }],\n        beforeRemoveRow: [{ type: Input }],\n        beforeRender: [{ type: Input }],\n        beforeRenderer: [{ type: Input }],\n        beforeRowMove: [{ type: Input }],\n        beforeRowResize: [{ type: Input }],\n        beforeSetRangeEnd: [{ type: Input }],\n        beforeSetRangeStart: [{ type: Input }],\n        beforeSetRangeStartOnly: [{ type: Input }],\n        beforeStretchingColumnWidth: [{ type: Input }],\n        beforeTouchScroll: [{ type: Input }],\n        beforeTrimRow: [{ type: Input }],\n        beforeUndo: [{ type: Input }],\n        beforeUnhideColumns: [{ type: Input }],\n        beforeUnhideRows: [{ type: Input }],\n        beforeUnmergeCells: [{ type: Input }],\n        beforeUntrimRow: [{ type: Input }],\n        beforeValidate: [{ type: Input }],\n        beforeValueRender: [{ type: Input }],\n        construct: [{ type: Input }],\n        hiddenColumn: [{ type: Input }],\n        hiddenRow: [{ type: Input }],\n        init: [{ type: Input }],\n        modifyAutofillRange: [{ type: Input }],\n        modifyCol: [{ type: Input }],\n        modifyColHeader: [{ type: Input }],\n        modifyColumnHeaderHeight: [{ type: Input }],\n        modifyColWidth: [{ type: Input }],\n        modifyCopyableRange: [{ type: Input }],\n        modifyData: [{ type: Input }],\n        modifyGetCellCoords: [{ type: Input }],\n        modifyRow: [{ type: Input }],\n        modifyRowData: [{ type: Input }],\n        modifyRowHeader: [{ type: Input }],\n        modifyRowHeaderWidth: [{ type: Input }],\n        modifyRowHeight: [{ type: Input }],\n        modifyTransformEnd: [{ type: Input }],\n        modifyTransformStart: [{ type: Input }],\n        persistentStateLoad: [{ type: Input }],\n        persistentStateReset: [{ type: Input }],\n        persistentStateSave: [{ type: Input }],\n        skipLengthCache: [{ type: Input }],\n        unmodifyCol: [{ type: Input }],\n        unmodifyRow: [{ type: Input }]\n    };\n    return HotTableComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar HotColumnComponent = /** @class */ (function () {\n    function HotColumnComponent(parentComponent) {\n        this.parentComponent = parentComponent;\n        this.firstRun = true;\n    }\n    /**\n     * @return {?}\n     */\n    HotColumnComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.firstRun = false;\n        this.parentComponent.addColumn(this);\n    };\n    /**\n     * @return {?}\n     */\n    HotColumnComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        if (this.firstRun) {\n            return;\n        }\n        this.parentComponent.onAfterColumnsChange();\n    };\n    /**\n     * @return {?}\n     */\n    HotColumnComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.parentComponent.removeColumn(this);\n    };\n    HotColumnComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'hot-column',\n                    template: ''\n                }] }\n    ];\n    /** @nocollapse */\n    HotColumnComponent.ctorParameters = function () { return [\n        { type: HotTableComponent }\n    ]; };\n    HotColumnComponent.propDecorators = {\n        allowEmpty: [{ type: Input }],\n        allowHtml: [{ type: Input }],\n        allowInvalid: [{ type: Input }],\n        checkedTemplate: [{ type: Input }],\n        className: [{ type: Input }],\n        columnSorting: [{ type: Input }],\n        colWidths: [{ type: Input }],\n        commentedCellClassName: [{ type: Input }],\n        copyable: [{ type: Input }],\n        correctFormat: [{ type: Input }],\n        data: [{ type: Input }],\n        dateFormat: [{ type: Input }],\n        defaultDate: [{ type: Input }],\n        editor: [{ type: Input }],\n        filteringCaseSensitive: [{ type: Input }],\n        invalidCellClassName: [{ type: Input }],\n        label: [{ type: Input }],\n        noWordWrapClassName: [{ type: Input }],\n        numericFormat: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        placeholderCellClassName: [{ type: Input }],\n        readOnly: [{ type: Input }],\n        readOnlyCellClassName: [{ type: Input }],\n        renderer: [{ type: Input }],\n        selectOptions: [{ type: Input }],\n        skipColumnOnPaste: [{ type: Input }],\n        sortByRelevance: [{ type: Input }],\n        source: [{ type: Input }],\n        strict: [{ type: Input }],\n        title: [{ type: Input }],\n        trimDropdown: [{ type: Input }],\n        type: [{ type: Input }],\n        uncheckedTemplate: [{ type: Input }],\n        validator: [{ type: Input }],\n        visibleRows: [{ type: Input }],\n        width: [{ type: Input }],\n        wordWrap: [{ type: Input }]\n    };\n    return HotColumnComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Angular prevents use static public getters under NgModule decorator.\n * Moreover, ngc doesn't allow importing `Version` from external file.\n */\nvar /**\n * Angular prevents use static public getters under NgModule decorator.\n * Moreover, ngc doesn't allow importing `Version` from external file.\n */\nVersion = /** @class */ (function () {\n    function Version() {\n    }\n    Object.defineProperty(Version, \"version\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return '5.1.0';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Version;\n}());\nvar HotTableModule = /** @class */ (function (_super) {\n    __extends(HotTableModule, _super);\n    function HotTableModule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    HotTableModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HotTableModule,\n            providers: [HotTableRegisterer],\n        };\n    };\n    HotTableModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ],\n                    exports: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ]\n                },] }\n    ];\n    return HotTableModule;\n}(Version));\n\nexport { HotColumnComponent, HotSettingsResolver, HotTableComponent, HotTableModule, HotTableRegisterer };\n"]}