{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@handsontable/angular/lib/hot-table-registerer.service.ts","ng://@handsontable/angular/lib/hot-settings-resolver.service.ts","ng://@handsontable/angular/lib/hot-table.component.ts","ng://@handsontable/angular/lib/hot-column.component.ts","ng://@handsontable/angular/lib/hot-table.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","instances","Map","HotTableRegisterer","prototype","getInstance","id","get","registerInstance","instance","set","removeInstance","delete","Injectable","AVAILABLE_OPTIONS","keys","Handsontable","DefaultSettings","AVAILABLE_HOOKS","hooks","getRegistered","HotSettingsResolver","mergeSettings","component","isSettingsObject","mergedSettings","concat","forEach","key","option","isHook","indexOf","_this","this","args","_i","arguments","length","_ngZone","run","apply","prepareChanges","changes","result","param","currentValue","HotTableComponent","_hotTableRegisterer","_hotSettingsResolver","columnsComponents","hotId","ngAfterViewInit","options","columns_1","column","push","runOutsideAngular","hotInstance","Core","container","nativeElement","init","ngOnChanges","newOptions","updateHotTable","ngOnDestroy","destroy","newSettings","updateSettings","onAfterColumnsChange","columns_2","columns","onAfterColumnsNumberChange","addColumn","removeColumn","index","splice","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","NgZone","ViewChild","static","Input","HotColumnComponent","parentComponent","firstRun","ngOnInit","HotTableModule","_super","__","constructor","create","tslib_1.__extends","forRoot","ngModule","NgModule","declarations","exports","Version","defineProperty"],"mappings":"0aAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,QCjBtBO,EAAY,IAAIC,IAEtBC,EAAA,WAAA,SAAAA,KAaA,OAXSA,EAAAC,UAAAC,YAAP,SAAmBC,GACjB,OAAOL,EAAUM,IAAID,IAGhBH,EAAAC,UAAAI,iBAAP,SAAwBF,EAAYG,GAClC,OAAOR,EAAUS,IAAIJ,EAAIG,IAGpBN,EAAAC,UAAAO,eAAP,SAAsBL,GACpB,OAAOL,EAAUW,UAAON,wBAX3BO,EAAAA,aAaDV,EAbA,GCFMW,EAA8BnB,OAAOoB,KAAKC,EAAaC,gBAAgBb,WACvEc,EAA4BF,EAAaG,MAAMC,gBAErDC,EAAA,WAAA,SAAAA,KAiDA,OA/CEA,EAAAjB,UAAAkB,cAAA,SAAcC,OACNC,EAAoD,iBAA1BD,EAAoB,SAC9CE,EAA4CD,EAAmBD,EAAoB,SAAI,GA8B7F,OA7BgBL,EAAgBQ,OAAOZ,GAE/Ba,QAAO,SAACC,OAEVC,EADEC,EAASZ,EAAgBa,QAAQH,IAAQ,EAG3CJ,GAAoBM,IACtBD,EAASN,EAAoB,SAAEK,SAGV,IAAnBL,EAAUK,KACZC,EAASN,EAAUK,SAGN,IAAXC,IAIFJ,EAAeG,GADY,mBAAXC,GAAyBC,EACtB,eAAG,IAAAE,EAAAC,KAASC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GAC7B,OAAOZ,EAAUe,QAAQC,IAAG,WACxB,OAAOV,EAAOW,MAAMR,EAAME,MAKVL,KAInBJ,GAGTJ,EAAAjB,UAAAqC,eAAA,SAAeC,OACPC,EAAoC,GAS1C,OAR6BhD,OAAOoB,KAAK2B,GAE9Bf,QAAO,SAAEiB,GACdF,EAAQ1C,eAAe4C,KACzBD,EAAOC,GAASF,EAAQE,GAAOC,gBAI5BF,uBA/CV9B,EAAAA,aAiDDQ,EAjDA,GCNAyB,EAAA,WA0TE,SAAAA,EACUR,EACAS,EACAC,GAFAf,KAAAK,QAAAA,EACAL,KAAAc,oBAAAA,EACAd,KAAAe,qBAAAA,EAnSFf,KAAAgB,kBAA0C,GAGzChB,KAAAiB,MAAQ,GAqYnB,OAlGEJ,EAAA1C,UAAA+C,gBAAA,WAAA,IAAAnB,EAAAC,KACQmB,EAAqCnB,KAAKe,qBAAqB1B,cAAcW,MAEnF,GAAIA,KAAKgB,kBAAkBZ,OAAS,EAAG,KAC/BgB,EAAU,GAEhBpB,KAAKgB,kBAAkBtB,QAAO,SAAE2B,GAC9BD,EAAQE,KAAKvB,EAAKgB,qBAAqB1B,cAAcgC,MAGvDF,EAAiB,QAAIC,EAGvBpB,KAAKK,QAAQkB,kBAAiB,WAC5BxB,EAAKyB,YAAc,IAAIzC,EAAa0C,KAAK1B,EAAK2B,UAAUC,cAAeR,GAEnEpB,EAAKkB,OACPlB,EAAKe,oBAAoBvC,iBAAiBwB,EAAKkB,MAAOlB,EAAKyB,aAG7DzB,EAAKyB,YAAYI,UAIrBf,EAAA1C,UAAA0D,YAAA,SAAYpB,GACV,QAAyB,IAArBT,KAAKwB,YAAT,KAIMM,EAAwC9B,KAAKe,qBAAqBP,eAAeC,GAEvFT,KAAK+B,eAAeD,KAGtBjB,EAAA1C,UAAA6D,YAAA,WAAA,IAAAjC,EAAAC,KACEA,KAAKK,QAAQkB,kBAAiB,WAC5BxB,EAAKyB,YAAYS,YAGfjC,KAAKiB,OACPjB,KAAKc,oBAAoBpC,eAAesB,KAAKiB,QAIjDJ,EAAA1C,UAAA4D,eAAA,SAAeG,GAAf,IAAAnC,EAAAC,KACOA,KAAKwB,aAIVxB,KAAKK,QAAQkB,kBAAiB,WAC5BxB,EAAKyB,YAAYW,eAAeD,GAAa,MAIjDrB,EAAA1C,UAAAiE,qBAAA,WAAA,IAAArC,EAAAC,KACE,QAA+B,IAA3BA,KAAKgB,mBAILhB,KAAKgB,kBAAkBZ,OAAS,EAAG,KAC/BiC,EAAyC,GAE/CrC,KAAKgB,kBAAkBtB,QAAO,SAAE2B,GAC9BgB,EAAQf,KAAKvB,EAAKgB,qBAAqB1B,cAAcgC,UAGjDS,EAAa,CACjBQ,QAASD,GAGXrC,KAAK+B,eAAeD,KAIxBjB,EAAA1C,UAAAoE,2BAAA,WAAA,IAAAxC,EAAAC,KACQsC,EAAyC,GAE3CtC,KAAKgB,kBAAkBZ,OAAS,GAClCJ,KAAKgB,kBAAkBtB,QAAO,SAAE2B,GAC9BiB,EAAQhB,KAAKvB,EAAKgB,qBAAqB1B,cAAcgC,MAIzDrB,KAAK+B,eAAe,CAAEO,QAAOA,KAG/BzB,EAAA1C,UAAAqE,UAAA,SAAUnB,GACRrB,KAAKgB,kBAAkBM,KAAKD,GAC5BrB,KAAKuC,8BAGP1B,EAAA1C,UAAAsE,aAAA,SAAapB,OACLqB,EAAgB1C,KAAKgB,kBAAkBlB,QAAQuB,GAErDrB,KAAKgB,kBAAkB2B,OAAOD,EAAO,GACrC1C,KAAKuC,kDA/YRK,EAAAA,UAAS3C,KAAA,CAAC,CACT4C,SAAU,YACVC,SAAU,sCACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,UAAW,CAAEhF,EAAoBkB,gDAhBjC+D,EAAAA,cAQOjF,SACAkB,wCAUNgE,EAAAA,UAASnD,KAAA,CAAC,YAAa,CAAEoD,UAAQ,sBAKjCC,EAAAA,qBACAA,EAAAA,qCAEAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,4BACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,mCACAA,EAAAA,oBACAA,EAAAA,qBACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,uBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,sCACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,sCACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,qBACAA,EAAAA,2BACAA,EAAAA,sCACAA,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,sBACAA,EAAAA,kCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,sCACAA,EAAAA,uBACAA,EAAAA,gCACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,iCACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,oCACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,kCACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,kCACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,oCACAA,EAAAA,qCACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,wCACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,qCACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,+BACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,sBACAA,EAAAA,8BACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,8BACAA,EAAAA,oBACAA,EAAAA,iCACAA,EAAAA,oBACAA,EAAAA,yBACAA,EAAAA,6CACAA,EAAAA,0CACAA,EAAAA,2BACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,6BAGAA,EAAAA,iCACAA,EAAAA,kCACAA,EAAAA,2BACAA,EAAAA,oCACAA,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,+BACAA,EAAAA,8CACAA,EAAAA,oCACAA,EAAAA,oCACAA,EAAAA,yBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,4BACAA,EAAAA,gCACAA,EAAAA,oCACAA,EAAAA,kCACAA,EAAAA,+CACAA,EAAAA,qCACAA,EAAAA,qCACAA,EAAAA,2BACAA,EAAAA,gCACAA,EAAAA,iCACAA,EAAAA,6CACAA,EAAAA,iCACAA,EAAAA,0CACAA,EAAAA,gCACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,mCACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,uCACAA,EAAAA,yCACAA,EAAAA,mCACAA,EAAAA,sCACAA,EAAAA,yCACAA,EAAAA,0CACAA,EAAAA,oCACAA,EAAAA,mCACAA,EAAAA,oCACAA,EAAAA,kCACAA,EAAAA,0BACAA,EAAAA,uCACAA,EAAAA,yBACAA,EAAAA,sCACAA,EAAAA,mCACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,uCACAA,EAAAA,qCACAA,EAAAA,8BACAA,EAAAA,oCACAA,EAAAA,iCACAA,EAAAA,uCACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,qCACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,kCACAA,EAAAA,+BACAA,EAAAA,6BACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,qDACAA,EAAAA,kDACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,4CACAA,EAAAA,mCACAA,EAAAA,4BACAA,EAAAA,kCACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,gCACAA,EAAAA,yCACAA,EAAAA,qCACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,iCACAA,EAAAA,iCACAA,EAAAA,0CACAA,EAAAA,sCACAA,EAAAA,4BACAA,EAAAA,iCACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,qCACAA,EAAAA,6BACAA,EAAAA,oCACAA,EAAAA,gCACAA,EAAAA,uCACAA,EAAAA,qCACAA,EAAAA,oCACAA,EAAAA,qCACAA,EAAAA,mCACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,uCACAA,EAAAA,0CACAA,EAAAA,oCACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,mCACAA,EAAAA,uCACAA,EAAAA,2CACAA,EAAAA,iCACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,mCACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,+BACAA,EAAAA,8BACAA,EAAAA,iCACAA,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,oBACAA,EAAAA,mCACAA,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,wCACAA,EAAAA,8BACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,mCACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,oCACAA,EAAAA,+BACAA,EAAAA,kCACAA,EAAAA,oCACAA,EAAAA,mCACAA,EAAAA,oCACAA,EAAAA,mCACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,SA0GHzC,EAlaA,GCAA0C,EAAA,WAuDE,SAAAA,EAAoBC,GAAAxD,KAAAwD,gBAAAA,EAxCZxD,KAAAyD,UAAW,EA0DrB,OAhBEF,EAAApF,UAAAuF,SAAA,WACE1D,KAAKyD,UAAW,EAChBzD,KAAKwD,gBAAgBhB,UAAUxC,OAGjCuD,EAAApF,UAAA0D,YAAA,WACM7B,KAAKyD,UAITzD,KAAKwD,gBAAgBpB,wBAGvBmB,EAAApF,UAAA6D,YAAA,WACEhC,KAAKwD,gBAAgBf,aAAazC,2BA7DrC4C,EAAAA,UAAS3C,KAAA,CAAC,CACT4C,SAAU,aACVC,SAAU,gDALHjC,yCAUNyC,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,sCACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,sBACAA,EAAAA,sCACAA,EAAAA,oCACAA,EAAAA,qBACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,wCACAA,EAAAA,wBACAA,EAAAA,qCACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,iCACAA,EAAAA,+BACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,4BACAA,EAAAA,oBACAA,EAAAA,iCACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,SAoBHC,EAzEA,GCeAI,EAAA,SAAAC,GAAA,SAAAD,mDAiBA,OLTO,SAAmBnG,EAAGC,GAEzB,SAASoG,IAAO7D,KAAK8D,YAActG,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEW,UAAkB,OAANV,EAAaC,OAAOqG,OAAOtG,IAAMoG,EAAG1F,UAAYV,EAAEU,UAAW,IAAI0F,GKD/CG,CAAAA,EAAAA,GACpBL,EAAAM,QAAd,WACE,MAAO,CACLC,SAAUP,EACVT,UAAW,CAAEhF,yBAdlBiG,EAAAA,SAAQlE,KAAA,CAAC,CACRmE,aAAc,CACZvD,EACA0C,GAEFc,QAAS,CACPxD,EACA0C,OAUJI,EAjBA,YANA,SAAAW,KAIA,OAHE5G,OAAA6G,eAAkBD,EAAA,UAAO,KAAzB,WACE,MAAO,yCAEXA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport Handsontable from 'handsontable';\n\nconst instances = new Map<string, Handsontable>();\n\n@Injectable()\nexport class HotTableRegisterer {\n  public getInstance(id: string): Handsontable {\n    return instances.get(id);\n  }\n\n  public registerInstance(id: string, instance: Handsontable): Map<string, Handsontable> {\n    return instances.set(id, instance);\n  }\n\n  public removeInstance(id: string): boolean {\n    return instances.delete(id);\n  }\n}\n","import { Injectable, SimpleChanges } from '@angular/core';\nimport Handsontable from 'handsontable';\n\nconst AVAILABLE_OPTIONS: string[] = Object.keys(Handsontable.DefaultSettings.prototype);\nconst AVAILABLE_HOOKS: string[] = Handsontable.hooks.getRegistered();\n\n@Injectable()\nexport class HotSettingsResolver {\n  mergeSettings(component): object {\n    const isSettingsObject = typeof component['settings'] === 'object';\n    const mergedSettings: Handsontable.GridSettings = isSettingsObject ? component['settings'] : {};\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n\n    options.forEach(key => {\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n      let option;\n\n      if (isSettingsObject && isHook) {\n        option = component['settings'][key];\n      }\n\n      if (component[key] !== void 0) {\n        option = component[key];\n      }\n\n      if (option === void 0) {\n        return;\n\n      } else if (typeof option === 'function' && isHook) {\n        mergedSettings[key] = function(...args) {\n          return component._ngZone.run(() => {\n              return option.apply(this, args);\n          });\n        };\n\n      } else {\n        mergedSettings[key] = option;\n      }\n    });\n\n    return mergedSettings;\n  }\n\n  prepareChanges(changes: SimpleChanges): Handsontable.GridSettings {\n    const result: Handsontable.GridSettings = {};\n    const parameters: string[] = Object.keys(changes);\n\n    parameters.forEach((param) => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n\n    return result;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport Handsontable from 'handsontable';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\nimport { HotColumnComponent } from './hot-column.component';\n\n@Component({\n  selector: 'hot-table',\n  template: '<div #container [id]=\"hotId\"></div>',\n  encapsulation: ViewEncapsulation.None,\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\n})\nexport class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @ViewChild('container', { static: false }) public container;\n\n  private hotInstance: Handsontable;\n  private columnsComponents: HotColumnComponent[] = [];\n  // component inputs\n  @Input() settings: Handsontable.GridSettings;\n  @Input() hotId = '';\n  // handsontable options\n  @Input() activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\n  @Input() allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];\n  @Input() allowInsertRow: Handsontable.GridSettings['allowInsertRow'];\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\n  @Input() allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];\n  @Input() allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];\n  @Input() autoColumnSize: Handsontable.GridSettings['autoColumnSize'];\n  @Input() autoRowSize: Handsontable.GridSettings['autoRowSize'];\n  @Input() autoWrapCol: Handsontable.GridSettings['autoWrapCol'];\n  @Input() autoWrapRow: Handsontable.GridSettings['autoWrapRow'];\n  @Input() bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];\n  @Input() cell: Handsontable.GridSettings['cell'];\n  @Input() cells: Handsontable.GridSettings['cells'];\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\n  @Input() className: Handsontable.GridSettings['className'];\n  @Input() colHeaders: Handsontable.GridSettings['colHeaders'];\n  @Input() collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];\n  @Input() columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];\n  @Input() columns: Handsontable.GridSettings['columns'];\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\n  @Input() columnSummary: Handsontable.GridSettings['columnSummary'];\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\n  @Input() comments: Handsontable.GridSettings['comments'];\n  @Input() contextMenu: Handsontable.GridSettings['contextMenu'];\n  @Input() copyable: Handsontable.GridSettings['copyable'];\n  @Input() copyPaste: Handsontable.GridSettings['copyPaste'];\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\n  @Input() currentColClassName: Handsontable.GridSettings['currentColClassName'];\n  @Input() currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];\n  @Input() currentRowClassName: Handsontable.GridSettings['currentRowClassName'];\n  @Input() customBorders: Handsontable.GridSettings['customBorders'];\n  @Input() data: Handsontable.GridSettings['data'];\n  @Input() dataSchema: Handsontable.GridSettings['dataSchema'];\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\n  @Input() debug: Handsontable.GridSettings['debug'];\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\n  @Input() disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];\n  @Input() dragToScroll: Handsontable.GridSettings['dragToScroll'];\n  @Input() dropdownMenu: Handsontable.GridSettings['dropdownMenu'];\n  @Input() editor: Handsontable.GridSettings['editor'];\n  @Input() enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];\n  @Input() enterMoves: Handsontable.GridSettings['enterMoves'];\n  @Input() fillHandle: Handsontable.GridSettings['fillHandle'];\n  @Input() filter: Handsontable.GridSettings['filter'];\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\n  @Input() filters: Handsontable.GridSettings['filters'];\n  @Input() fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];\n  @Input() fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];\n  @Input() fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];\n  @Input() formulas: Handsontable.GridSettings['formulas'];\n  @Input() fragmentSelection: Handsontable.GridSettings['fragmentSelection'];\n  @Input() ganttChart: Handsontable.GridSettings['ganttChart'];\n  @Input() headerTooltips: Handsontable.GridSettings['headerTooltips'];\n  @Input() height: Handsontable.GridSettings['height'];\n  @Input() hiddenColumns: Handsontable.GridSettings['hiddenColumns'];\n  @Input() hiddenRows: Handsontable.GridSettings['hiddenRows'];\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\n  @Input() label: Handsontable.GridSettings['label'];\n  @Input() language: Handsontable.GridSettings['language'];\n  @Input() licenseKey: Handsontable.GridSettings['licenseKey'];\n  @Input() manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];\n  @Input() manualColumnMove: Handsontable.GridSettings['manualColumnMove'];\n  @Input() manualColumnResize: Handsontable.GridSettings['manualColumnResize'];\n  @Input() manualRowMove: Handsontable.GridSettings['manualRowMove'];\n  @Input() manualRowResize: Handsontable.GridSettings['manualRowResize'];\n  @Input() maxCols: Handsontable.GridSettings['maxCols'];\n  @Input() maxRows: Handsontable.GridSettings['maxRows'];\n  @Input() mergeCells: Handsontable.GridSettings['mergeCells'];\n  @Input() minCols: Handsontable.GridSettings['minCols'];\n  @Input() minRows: Handsontable.GridSettings['minRows'];\n  @Input() minSpareCols: Handsontable.GridSettings['minSpareCols'];\n  @Input() minSpareRows: Handsontable.GridSettings['minSpareRows'];\n  @Input() multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];\n  @Input() nestedHeaders: Handsontable.GridSettings['nestedHeaders'];\n  @Input() nestedRows: Handsontable.GridSettings['nestedRows'];\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\n  @Input() observeChanges: Handsontable.GridSettings['observeChanges'];\n  @Input() observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];\n  @Input() outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];\n  @Input() persistentState: Handsontable.GridSettings['persistentState'];\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\n  @Input() preventOverflow: Handsontable.GridSettings['preventOverflow'];\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\n  @Input() renderAllRows: Handsontable.GridSettings['renderAllRows'];\n  @Input() renderer: Handsontable.GridSettings['renderer'];\n  @Input() rowHeaders: Handsontable.GridSettings['rowHeaders'];\n  @Input() rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];\n  @Input() rowHeights: Handsontable.GridSettings['rowHeights'];\n  @Input() search: Handsontable.GridSettings['search'];\n  @Input() selectionMode: Handsontable.GridSettings['selectionMode'];\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\n  @Input() skipRowOnPaste: any;\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\n  @Input() source: Handsontable.GridSettings['source'];\n  @Input() startCols: Handsontable.GridSettings['startCols'];\n  @Input() startRows: Handsontable.GridSettings['startRows'];\n  @Input() stretchH: Handsontable.GridSettings['stretchH'];\n  @Input() strict: Handsontable.GridSettings['strict'];\n  @Input() tableClassName: Handsontable.GridSettings['tableClassName'];\n  @Input() tabMoves: Handsontable.GridSettings['tabMoves'];\n  @Input() title: Handsontable.GridSettings['title'];\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\n  @Input() trimRows: Handsontable.GridSettings['nestedRows'];\n  @Input() trimWhitespace: Handsontable.GridSettings['trimWhitespace'];\n  @Input() type: Handsontable.GridSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\n  @Input() undo: Handsontable.GridSettings['undo'];\n  @Input() validator: Handsontable.GridSettings['validator'];\n  @Input() viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];\n  @Input() viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\n  @Input() width: Handsontable.GridSettings['width'];\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\n\n  // handsontable hooks\n  @Input() afterAddChild: Handsontable.GridSettings['afterAddChild'];\n  @Input() afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];\n  @Input() afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];\n  @Input() afterChange: Handsontable.GridSettings['afterChange'];\n  @Input() afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];\n  @Input() afterColumnMove: Handsontable.GridSettings['afterColumnMove'];\n  @Input() afterColumnResize: Handsontable.GridSettings['afterColumnResize'];\n  @Input() afterColumnSort: Handsontable.GridSettings['afterColumnSort'];\n  @Input() afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];\n  @Input() afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];\n  @Input() afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];\n  @Input() afterCopy: Handsontable.GridSettings['afterCopy'];\n  @Input() afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];\n  @Input() afterCreateCol: Handsontable.GridSettings['afterCreateCol'];\n  @Input() afterCreateRow: Handsontable.GridSettings['afterCreateRow'];\n  @Input() afterCut: Handsontable.GridSettings['afterCut'];\n  @Input() afterDeselect: Handsontable.GridSettings['afterDeselect'];\n  @Input() afterDestroy: Handsontable.GridSettings['afterDestroy'];\n  @Input() afterDetachChild: Handsontable.GridSettings['afterDetachChild'];\n  @Input() afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];\n  @Input() afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];\n  @Input() afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];\n  @Input() afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];\n  @Input() afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];\n  @Input() afterFilter: Handsontable.GridSettings['afterFilter'];\n  @Input() afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];\n  @Input() afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];\n  @Input() afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];\n  @Input() afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];\n  @Input() afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];\n  @Input() afterHideColumns: Handsontable.GridSettings['afterHideColumns'];\n  @Input() afterHideRows: Handsontable.GridSettings['afterHideRows'];\n  @Input() afterInit: Handsontable.GridSettings['afterInit'];\n  @Input() afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];\n  @Input() afterListen: Handsontable.GridSettings['afterListen'];\n  @Input() afterLoadData: Handsontable.GridSettings['afterLoadData'];\n  @Input() afterMergeCells: Handsontable.GridSettings['afterMergeCells'];\n  @Input() afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];\n  @Input() afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];\n  @Input() afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];\n  @Input() afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];\n  @Input() afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];\n  @Input() afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];\n  @Input() afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];\n  @Input() afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];\n  @Input() afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];\n  @Input() afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];\n  @Input() afterPaste: Handsontable.GridSettings['afterPaste'];\n  @Input() afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];\n  @Input() afterRedo: Handsontable.GridSettings['afterRedo'];\n  @Input() afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];\n  @Input() afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];\n  @Input() afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];\n  @Input() afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];\n  @Input() afterRender: Handsontable.GridSettings['afterRender'];\n  @Input() afterRenderer: Handsontable.GridSettings['afterRenderer'];\n  @Input() afterRowMove: Handsontable.GridSettings['afterRowMove'];\n  @Input() afterRowResize: Handsontable.GridSettings['afterRowResize'];\n  @Input() afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];\n  @Input() afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];\n  @Input() afterSelection: Handsontable.GridSettings['afterSelection'];\n  @Input() afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];\n  @Input() afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];\n  @Input() afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];\n  @Input() afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];\n  @Input() afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];\n  @Input() afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];\n  @Input() afterTrimRow: Handsontable.GridSettings['afterTrimRow'];\n  @Input() afterUndo: Handsontable.GridSettings['afterUndo'];\n  @Input() afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];\n  @Input() afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];\n  @Input() afterUnlisten: Handsontable.GridSettings['afterUnlisten'];\n  @Input() afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];\n  @Input() afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];\n  @Input() afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];\n  @Input() afterValidate: Handsontable.GridSettings['afterValidate'];\n  @Input() afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];\n  @Input() afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];\n  @Input() beforeAddChild: Handsontable.GridSettings['beforeAddChild'];\n  @Input() beforeAutofill: Handsontable.GridSettings['beforeAutofill'];\n  @Input() beforeAutofillInsidePopulate: Handsontable.GridSettings['beforeAutofillInsidePopulate'];\n  @Input() beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];\n  @Input() beforeChange: Handsontable.GridSettings['beforeChange'];\n  @Input() beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];\n  @Input() beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];\n  @Input() beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];\n  @Input() beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];\n  @Input() beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];\n  @Input() beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];\n  @Input() beforeCopy: Handsontable.GridSettings['beforeCopy'];\n  @Input() beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];\n  @Input() beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];\n  @Input() beforeCut: Handsontable.GridSettings['beforeCut'];\n  @Input() beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];\n  @Input() beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];\n  @Input() beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];\n  @Input() beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];\n  @Input() beforeFilter: Handsontable.GridSettings['beforeFilter'];\n  @Input() beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];\n  @Input() beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];\n  @Input() beforeHideRows: Handsontable.GridSettings['beforeHideRows'];\n  @Input() beforeInit: Handsontable.GridSettings['beforeInit'];\n  @Input() beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];\n  @Input() beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];\n  @Input() beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];\n  @Input() beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];\n  @Input() beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];\n  @Input() beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];\n  @Input() beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];\n  @Input() beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];\n  @Input() beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];\n  @Input() beforePaste: Handsontable.GridSettings['beforePaste'];\n  @Input() beforeRedo: Handsontable.GridSettings['beforeRedo'];\n  @Input() beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];\n  @Input() beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];\n  @Input() beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];\n  @Input() beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];\n  @Input() beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];\n  @Input() beforeRender: Handsontable.GridSettings['beforeRender'];\n  @Input() beforeRenderer: Handsontable.GridSettings['beforeRenderer'];\n  @Input() beforeRowMove: Handsontable.GridSettings['beforeRowMove'];\n  @Input() beforeRowResize: Handsontable.GridSettings['beforeRowResize'];\n  @Input() beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];\n  @Input() beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];\n  @Input() beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];\n  @Input() beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];\n  @Input() beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];\n  @Input() beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];\n  @Input() beforeUndo: Handsontable.GridSettings['beforeUndo'];\n  @Input() beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];\n  @Input() beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];\n  @Input() beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];\n  @Input() beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];\n  @Input() beforeValidate: Handsontable.GridSettings['beforeValidate'];\n  @Input() beforeValueRender: Handsontable.GridSettings['beforeValueRender'];\n  @Input() construct: Handsontable.GridSettings['construct'];\n  @Input() hiddenColumn: Handsontable.GridSettings['hiddenColumn'];\n  @Input() hiddenRow: Handsontable.GridSettings['hiddenRow'];\n  @Input() init: Handsontable.GridSettings['init'];\n  @Input() modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];\n  @Input() modifyCol: Handsontable.GridSettings['modifyCol'];\n  @Input() modifyColHeader: Handsontable.GridSettings['modifyColHeader'];\n  @Input() modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];\n  @Input() modifyColWidth: Handsontable.GridSettings['modifyColWidth'];\n  @Input() modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];\n  @Input() modifyData: Handsontable.GridSettings['modifyData'];\n  @Input() modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];\n  @Input() modifyRow: Handsontable.GridSettings['modifyRow'];\n  @Input() modifyRowData: Handsontable.GridSettings['modifyRowData'];\n  @Input() modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];\n  @Input() modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];\n  @Input() modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];\n  @Input() modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];\n  @Input() modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];\n  @Input() persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];\n  @Input() persistentStateReset: Handsontable.GridSettings['persistentStateReset'];\n  @Input() persistentStateSave: Handsontable.GridSettings['persistentStateSave'];\n  @Input() skipLengthCache: Handsontable.GridSettings['skipLengthCache'];\n  @Input() unmodifyCol: Handsontable.GridSettings['unmodifyCol'];\n  @Input() unmodifyRow: Handsontable.GridSettings['unmodifyRow'];\n\n  constructor(\n    private _ngZone: NgZone,\n    private _hotTableRegisterer: HotTableRegisterer,\n    private _hotSettingsResolver: HotSettingsResolver,\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: Handsontable.GridSettings = this._hotSettingsResolver.mergeSettings(this);\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      options['columns'] = columns;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n\n      if (this.hotId) {\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n      }\n      // @ts-ignore\n      this.hotInstance.init();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.hotInstance === void 0) {\n      return;\n    }\n\n    const newOptions: Handsontable.GridSettings = this._hotSettingsResolver.prepareChanges(changes);\n\n    this.updateHotTable(newOptions);\n  }\n\n  ngOnDestroy(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.destroy();\n    });\n\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n  }\n\n  updateHotTable(newSettings: Handsontable.GridSettings ): void {\n    if (!this.hotInstance) {\n      return;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.updateSettings(newSettings, false);\n    });\n  }\n\n  onAfterColumnsChange(): void {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n\n    if (this.columnsComponents.length > 0) {\n      const columns: Handsontable.ColumnSettings[] = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      const newOptions = {\n        columns: columns\n      };\n\n      this.updateHotTable(newOptions);\n    }\n  }\n\n  onAfterColumnsNumberChange(): void {\n    const columns: Handsontable.ColumnSettings[] = [];\n\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n\n    this.updateHotTable({ columns });\n  }\n\n  addColumn(column: HotColumnComponent): void {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n\n  removeColumn(column: HotColumnComponent): void {\n    const index: number = this.columnsComponents.indexOf(column);\n\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Input,\n} from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport Handsontable from 'handsontable';\n\n@Component({\n  selector: 'hot-column',\n  template: '',\n})\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\n  private firstRun = true;\n  // handsontable column options\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\n  @Input() className: Handsontable.GridSettings['className'];\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\n  @Input() copyable: Handsontable.GridSettings['copyable'];\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\n  @Input() data: Handsontable.GridSettings['data'];\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\n  @Input() editor: Handsontable.GridSettings['editor'];\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\n  @Input() label: Handsontable.GridSettings['label'];\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\n  @Input() renderer: Handsontable.GridSettings['renderer'];\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\n  @Input() source: Handsontable.GridSettings['source'];\n  @Input() strict: Handsontable.GridSettings['strict'];\n  @Input() title: Handsontable.GridSettings['title'];\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\n  @Input() type: Handsontable.GridSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\n  @Input() validator: Handsontable.GridSettings['validator'];\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\n  @Input() width: Handsontable.GridSettings['width'];\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\n\n  constructor(private parentComponent: HotTableComponent) {}\n\n  ngOnInit(): void {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n\n  ngOnChanges(): void {\n    if (this.firstRun) {\n      return;\n    }\n\n    this.parentComponent.onAfterColumnsChange();\n  }\n\n  ngOnDestroy(): void {\n    this.parentComponent.removeColumn(this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport { HotColumnComponent } from './hot-column.component';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\n\n/**\n * Angular prevents use static public getters under NgModule decorator.\n * Moreover, ngc doesn't allow importing `Version` from external file.\n */\nclass Version {\n  public static get version(): string {\n    return '5.1.0';\n  }\n}\n\n@NgModule({\n  declarations: [\n    HotTableComponent,\n    HotColumnComponent,\n  ],\n  exports: [\n    HotTableComponent,\n    HotColumnComponent,\n  ]\n})\nexport class HotTableModule extends Version {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: HotTableModule,\n      providers: [ HotTableRegisterer ],\n    };\n  }\n}\n"]}